"use client";
import { React, useState } from "react";
import { acquire_session_token } from "../api/acquire_session_token/route";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { dark } from "react-syntax-highlighter/dist/esm/styles/prism";
import ReactMarkdown from "react-markdown";

const AcquireSessionToken = () => {
  const [userToken, setUserToken] = useState("user token will appear here");
  const [encryptionKey, setEncryptionKey] = useState(
    "encryption key will appear here"
  );
  const [codeCopied, setCodeCopied] = useState(false);
  const [userTokenCopied, setUserTokenCopied] = useState(false);
  const [encryptionKeyCopied, setEncryptionKeyCopied] = useState(false);
  const [userCredentialCalled, setUserCredentialCalled] = useState(false);

  const markdown = `
# Welcome To Your Third Challenge For Creating User Controlled Wallets

In this task, you will complete the third step of creating a user controlled wallet, which is to get the session token and encryption key.

Please note that, at this point, you should already have the User ID.

## What Are Session Token And Encryption Key?

A session token is a temporary credential that is generated by the Circle API for authenticating the user for subsequent requests to the API endpoints. A session token expires after a certain period of time or when the user logs out.

An encryption key is a secret value that is derived from the user's PIN or biometric data. It is used to encrypt and decrypt the user's private keys, which are needed to sign transactions and interact with smart contracts on the blockchain. The encryption key is never stored or transmitted by Circle, and it is also used to generate a challenge ID, which is a one-time code that is required to initialize the user's wallets.

This task will be done in the same manner as the previous ones.

- You will be updating the code in the folder \`~/src/app/api/acquire_session_token/route.js\`.
- Once you get the session token and encryption key, you will add them to your \`.env.local\` file under the names: \`NEXT_PUBLIC_USER_TOKEN\` and \`NEXT_PUBLIC_ENCRYPTION_KEY\`.
- Even though the session token and encryption key are temporary, the reason why you are adding them to your \`.env.local\` file is to make sure that at the end of the user-controlled-wallet section, in the \`.env.local\` file, you will have all the necessary information to create a user-controlled-wallet.
- You will upload the user token to the Risein platform.
`;

  const retrieve_user_credentials = async () => {
    const response = await acquire_session_token();
    setUserToken(response.userToken);
    setEncryptionKey(response.encryptionKey);
    setUserCredentialCalled(true);
  };

  const copyCodeToClipboard = async () => {
    await navigator.clipboard.writeText(codeString);
    setCodeCopied(true);
  };

  const copyUserTokenToClipboard = async () => {
    await navigator.clipboard.writeText(userToken);
    setUserTokenCopied(true);
  };

  const copyEncryptionKeyToClipboard = async () => {
    await navigator.clipboard.writeText(encryptionKey);
    setEncryptionKeyCopied(true);
  };

  const trimUserToken = (token) => {
    return token.slice(0, 5) + "..." + token.slice(-5);
  };

  const codeString = `
import axios from "axios";

export const acquire_session_token = async () => {
  
  const options = {
    method: "POST",
    url: "https://api.circle.com/v1/w3s/users/token",
    headers: {
      "Content-Type": "application/json",
      Authorization: \`Bearer \${process.env.NEXT_PUBLIC_API_KEY}\`,
    },
    data: { userId: process.env.NEXT_PUBLIC_USER_ID },
  };

  return axios
    .request(options)
    .then(function (response) {
      console.log("user token:", response.data.data.userToken);
      console.log("encryption key:", response.data.data.encryptionKey);
      return {
        userToken: response.data.data.userToken,
        encryptionKey: response.data.data.encryptionKey,
      };
    })
    .catch(function (error) {
      console.error(error);
    });

};
`.trim();

  return (
    <div className="grid grid-rows-3">
      <div className="row-span-2 p-12">
        <div className="grid grid-cols-2 h-full gap-12">
          <div className="bg-black flex items-center justify-center rounded-lg border-2 h-full w-full">
            <pre
              className="p-4 w-full h-full overflow-auto hide-scrollbar"
              style={{
                whiteSpace: "pre-wrap",
                overflowWrap: "break-word",
                maxHeight: "80vh",
                overflowY: "scroll",
              }}
            >
              <ReactMarkdown>{markdown}</ReactMarkdown>
            </pre>
          </div>
          <div className="relative group h-full w-full rounded-lg border-2">
            <button
              className="rounded p-2 absolute right-0 top-0 bg-purple-700 text-white opacity-0 group-hover:opacity-90 transition-opacity duration-200"
              onClick={copyCodeToClipboard}
            >
              {codeCopied ? "Copied!" : "Copy to Clipboard"}
            </button>
            <div className="hide-scrollbarc h-full w-full overflow-auto">
              <SyntaxHighlighter
                className="remove-padding h-full w-full"
                language="javascript"
                style={dark}
                customStyle={{ padding: 0, margin: 0 }}
              >
                {codeString}
              </SyntaxHighlighter>
            </div>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-2">
        <div className="flex items-center justify-center">
          <button
            onClick={() => {
              retrieve_user_credentials();
            }}
            className="rounded-lg border-2 p-4 hover:bg-purple-700"
          >
            Get User Credentials
          </button>
        </div>
        <div className="grid grid-cols-2">
          <div className="flex items-center justify-center">
            <div className="relative group">
              <button
                className="absolute right-0 top-0 bg-purple-700 text-white px-2 py-1 rounded opacity-0 group-hover:opacity-90 transition-opacity duration-200"
                onClick={copyUserTokenToClipboard}
              >
                {userTokenCopied ? "Copied!" : "Copy to Clipboard"}
              </button>
              <div className="rounded-lg w-full p-2 border-2 mx-8 flex justify-center">
                {userCredentialCalled ? trimUserToken(userToken) : userToken}
              </div>
            </div>
          </div>
          <div className="flex items-center justify-center">
            <div className="relative group">
              <button
                className="absolute right-0 top-0 bg-purple-700 text-white px-2 py-1 rounded opacity-0 group-hover:opacity-90 transition-opacity duration-200"
                onClick={copyEncryptionKeyToClipboard}
              >
                {encryptionKeyCopied ? "Copied!" : "Copy to Clipboard"}
              </button>
              <div className="rounded-lg p-2 border-2 mx-8 flex justify-center">
                {userCredentialCalled
                  ? trimUserToken(encryptionKey)
                  : encryptionKey}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AcquireSessionToken;
